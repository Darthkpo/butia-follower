import os
import sys
sys.path.insert(0, '/usr/share/sugar/activities/TurtleBots.activity/plugins/butia')

from pybot import usb4butia
import nxt.locator
from nxt.motor import *
from time import sleep

b = nxt.locator.find_one_brick()
robot = usb4butia.USB4Butia()
robot.refresh()

d_adelante = 2
d_left = 4
d_right = 3

def close_hand(b):
    m_left = Motor(b, PORT_A)
    m_left.turn(-8, 84)

def open_hand(b):
    m_left = Motor(b, PORT_A)
    m_left.turn(16, 84)

def clear() :
	os.system('clear')

times = 100
def getAverage(rt,port1,port2) :
	clear()
	print "Grey Scale Average v1.6"

	raw_input("Ready to sense white>")

	white1 = 0
	white2 = 0
	for x in xrange(times): 
		white1 += rt.getGray(port1)
		white2 += rt.getGray(port2)

	white1 = white1 / times
	white2 = white2 / times

	raw_input("Ready to sense black>")

	black1 = 0
	black2 = 0
	for x in xrange(times): 
		black1 += rt.getGray(port1)
		black2 += rt.getGray(port2)

	black1 = black1 / times
	black2 = black2 / times
	
	avrg1 = (white1 + black1) / 2
	avrg2 = (white2 + black2) / 2
	print "Obtained values: ",avrg1, ", ", avrg2 
	f = open("gconf", "w")
	f.write(str(avrg1) + " " + str(avrg2))
	f.close()
	raw_input("done>")
	clear()
	return (white1 + black1) / 2, (white2 + black2) / 2

def followLine(rt,values,greySensor1,greySensor2) :
	if(rt.getGray(greySensor1) < values[0] and rt.getGray(greySensor2) < values[1]) :

		rt.set2MotorSpeed(1, 500, 1, 500 - 250)

	else :

		if(rt.getGray(greySensor1) > values[0] and rt.getGray(greySensor2) < values[1]) :

			rt.set2MotorSpeed(1, 500, 0, 500)

		else :

			rt.set2MotorSpeed(0, 500, 1, 500)

zigzagspeed = 300
def zigzag():
	print "Initial turn.."
	robot.set2MotorSpeed(1, zigzagspeed, 0, zigzagspeed)
	while robot.getDistance(d_left) > 28000:
		pass
	print "Aligned 90 degree!"
	turn_counter = 0
	while turn_counter <= 4 or robot.getDistance(d_right) > 28000:
		print "first stage"
		robot.set2MotorSpeed(0, zigzagspeed + 700, 1, zigzagspeed - 250)
		while robot.getDistance(d_left) < 45000 and robot.getDistance(d_right) > 28000 and turn_counter <= 4:
			pass
		sleep(0.4)
		turn_counter += 1
		print turn_counter
		robot.set2MotorSpeed(1, zigzagspeed, 1, zigzagspeed)
		while robot.getDistance(d_left) > 45000 and robot.getDistance(d_right) > 28000 and turn_counter <= 4:
			pass
	print "fix burn..."
	robot.set2MotorSpeed(1, zigzagspeed - 250, 0, zigzagspeed + 700)
	sleep(0.5)
	print "second stage"
	while robot.getDistance(d_left) > 28000:
		robot.set2MotorSpeed(1, zigzagspeed - 250, 0, zigzagspeed + 700)
		while robot.getDistance(d_right) < 45000 and robot.getDistance(d_left) > 28000:
			pass
		sleep(0.4)
		robot.set2MotorSpeed(1, zigzagspeed, 1, zigzagspeed)
		while robot.getDistance(d_right) > 45000 and robot.getDistance(d_left) > 28000:
			pass
	

gtspeed = 200
def get_thrash(values,greySensor1,greySensor2):
	print "getting thrash..."
	robot.set2MotorSpeed(0,gtspeed+500,0,gtspeed+500)
	sleep(1.5)
	robot.set2MotorSpeed(1, gtspeed, 0, gtspeed)
	dist = robot.getDistance(d_adelante)
	while dist > 48000:
		dist = robot.getDistance(d_adelante)
	print dist
	robot.set2MotorSpeed(1,gtspeed,1,gtspeed+40)
	dist = robot.getDistance(d_adelante)
	while dist > 25000:
		dist = robot.getDistance(d_adelante)
	sleep(1.2)
	robot.set2MotorSpeed(0,0,0,0)
	close_hand(b)
	robot.set2MotorSpeed(1,gtspeed+500,0,gtspeed+500)
	sleep(1)
	robot.set2MotorSpeed(0,gtspeed + 500,0,gtspeed + 500)
	while True:
		print robot.getGray(greySensor1), robot.getGray(greySensor2)
		if robot.getGray(greySensor1) > values[0] - 3000 or robot.getGray(greySensor2) > values[1] - 3000:
			break

	robot.set2MotorSpeed(0, gtspeed + 300, 1, gtspeed + 300)
	sleep(0.6)

if(sys.argv[1] == "-g") :

	result = getAverage(robot, 5, 6)

else :

	result = int(sys.argv[1]), int(sys.argv[2])

got_thrash = True
while(True) :
	
	if got_thrash and robot.getDistance(d_right) < 45000:
		get_thrash(result,5,6)
		got_thrash = False
	#if robot.getDistance(d_adelante) < 30000:
		#zigzag()
	followLine(robot,result,5,6)
